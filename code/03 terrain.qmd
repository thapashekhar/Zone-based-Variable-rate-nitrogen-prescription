---
title: "Terrain properties"
author: "Shekhar Thapa"
format:
  html:
    code-fold: false
    embed-resources: true
    toc: true
    number-sections: true
    theme: journal
    #cerulean, journal, quartz, sketchy, slate, morph, superhero, vapor
knitr: 
  opts_chunk: 
    message: false
    warning: false
---

# Learning Objectives  
Today, our objectives are to:  

- Import point vector layer of elevation  
- Interpolate elevation data  
- Compute secondary terrain variables such as slope, aspect, and flow direction  
- Export all soil terrain layers to file  

# Setup  
```{r setup}

# Packages
library(dplyr)
library(tidyr)
library(janitor)
library(readr)
library(sf) #vector manipulation
library(ggplot2)
library(viridis)
library(ggthemes)
library(gstat) #IDW
library(stars) #raster manipulation
library(terra) #topographical variables
library(patchwork) #combining multiple plots  
library(tibble) #rownames to column

```

```{r defining map theme}
mytheme_map <- 
  theme_map()+
  theme(legend.position = "right",
        panel.background = element_rect(fill="gray80",
                                        color=NA),
        plot.background = element_rect(fill="gray80",
                                       color=NA),
        legend.title = element_text(size=30),
        legend.text = element_text(size=30),
        plot.title = element_text(hjust = 0.5, colour = "blue",size = 32),
        plot.caption = element_text(hjust = 0.5, colour = "blue", size = 32)
        )

```

```{r reading elevation data}
elev <- read_csv("../data/Deer Run1 Elevation.csv")
elev
#summary(elev)
```

Notice how  we used `read_csv` to import the elevation data set.  
As such, as of now R does not know this is a spatial object or with what CRS it was collected.  

Thus, let's do some wrangling to address that and other aspects.  

# Wrangling  
```{r elev_w}
elev_w <- elev %>%
  clean_names() %>%
  st_as_sf(coords = c("longitude", "latitude")) %>%
  st_set_crs(value = 4326) %>%
  st_transform(crs = 6345) %>%
  mutate(elev_m = elevation*0.3048) %>%
  dplyr::select(elev_m, geometry)
elev_w

summary(elev_w)
```

# EDA  
```{r elev_w map}
elev_w %>%
  #sample_frac(.1) %>% to sample randomly
  ggplot()+
  geom_sf(aes(color = elev_m), size =.01)+
  geom_sf(data = boundary_w, fill= NA, color = "red")+
  scale_color_viridis_c(option = "E")+
  mytheme_map

```
Wait, wasn't this a point vector data? 
How come it looks like polygons?  

# Grid  
Since we are interpolating, we need to create a grid (same as for the yield exercise) based on the field boundary.    

```{r boundary_w}
boundary_w0 <- read_sf("../data/boundary/DR1 boundary.shp") %>%
  st_transform(crs = 6345)

boundary_w<- boundary_w0[2,]
```

```{r grid_r}
# grid in raster format
grid_r <- boundary_w %>%
  st_make_grid(cellsize = 10) %>%
  st_as_sf() %>%
  st_rasterize(dx=10, dy=10) %>%
  st_crop(boundary_w)

grid_r

ggplot()+
  geom_stars(data = grid_r)+
  mytheme_map

```

# Interpolation  
```{r idw_mod}
idw_mod <- gstat(formula = elev_m ~ 1,
                 data = elev_w
                 )

idw_mod

```

```{r idw_pred}
idw_pred <- predict(idw_mod, grid_r)

idw_pred
```

```{r elev_map }
elev_map <- ggplot()+
  geom_stars(data = idw_pred)+
  geom_sf(data = boundary_w, fill = NA, color="red",linewith =0.2)+
  scale_fill_viridis_b(option = "E",na.value = "gray80")+
  labs(fill = "Elev. (m)", caption = "Elevation")+
  mytheme_map

elev_map
```
Where are highest points? And lowest? Which way do you think water moves?  

# Computing secondary variables  
## Slope  
```{r slope}
slope <- idw_pred %>%
  dplyr::select(elev_m = var1.pred) %>%
  # Transforming to SpatRast for slope computation  
  terra::rast() %>%
  terra::terrain("slope", unit ="radians") %>% #more information from help of terrain()

  # Transforming back into stars (so works with ggplot)
  st_as_stars() %>%
  st_set_crs(value = 6345) %>%
  mutate(pct = tan(slope)*100) %>%
  dplyr::select(pct)

  # Transforming to pct


slope
```


```{r slope map}
slope_map <- ggplot()+
  geom_stars(data = slope)+
  geom_sf(data = boundary_w, 
          fill = NA, color="red",linewith =0.2)+
  scale_fill_viridis_b(option = "E",na.value = "gray80")+
  labs(fill = "Slope\n(%)", caption = "Slope")+
  mytheme_map

slope_map
```

## Aspect  
```{r aspect}
aspect <- idw_pred %>%
  dplyr::select(elev_m = var1.pred) %>%
  terra::rast() %>%
  terra::terrain("aspect", unit = "degrees") %>%
  st_as_stars() %>%
  st_set_crs(value =  6345)

aspect
```


```{r aspect map}
aspect_map <- ggplot()+
  geom_stars(data = aspect)+
  geom_sf(data = boundary_w, 
          fill = NA, color="red",linewith =0.2)+
  scale_fill_viridis_b(option = "E", na.value = "gray80",
                       breaks = c(22.5,
                                  67.5,
                                  112.5,
                                  157.5,
                                  202.5,
                                  247.5,
                                  292.5,
                                  337.5))+
  labs(fill="Aspect\n(degrees)", caption = "Aspect")+
  mytheme_map

aspect_map
```

## Flow direction  
```{r flowdir}
flowdir <- idw_pred %>%
  dplyr::select(elev_m = var1.pred) %>%
  terra::rast() %>%
  terra::terrain("flowdir", unit = "radians") %>%
  st_as_stars() %>%
  st_set_crs(value =  6345)

flowdir
```


```{r flowdir map}
flowdir_map <- ggplot()+
  geom_stars(data = flowdir)+
  geom_sf(data = boundary_w, 
          fill = NA, color="red",linewith =0.2)+
  scale_fill_viridis_b(option = "E", na.value = "grey80",
                       breaks = c(1,2,
                                  4,8,
                                  16,32,
                                  64,128))+
  labs(fill="Flow dir.", caption="Flow direction")+
  mytheme_map

flowdir_map
```

```{r flowdir map 2}
ggplot()+
  geom_stars(data = flowdir %>%
               mutate(flowdir = factor(flowdir))
               )+
  geom_sf(data = boundary_w, fill =NA)+
  mytheme_map+
  facet_wrap(~flowdir)  #shows multiple category individually

```
## Quiz 
### Based on the map above, which of the panels (1 through 128) appears to have the most data points?

### Whatever was your answer above, translate that number into a cardinal direction (N, NE, E, SE, S,SW, W, NW). Which cardinal direction is related to the the number you answered above? In other words, in which direction is water moving on this field for most of the pixels?  

Tip: look into the documentation for function terrain using `help("terrain")`, make sure is the one from package `terra`. You will find your answer there.

Send me your answer by email (lmbastos@uga.edu), this will be your attendance.  

## Plotting all together
```{r plotting all together}
elev_map + slope_map + aspect_map + flowdir_map 

ggsave("../output/terrain.png", 
       width = 8, 
       height = 6.6)
```


# Grid extraction  
```{r elev_v}
elev_v <- idw_pred %>%
  st_as_sf(as_points = F,
           merge = F) %>%
  dplyr::select(elev_m = var1.pred)

elev_v
```
How many rows? What we expected?  

```{r slope_v}
slope_v <- slope %>%
  st_as_sf(as_points = F,
           merge = F) %>%
  dplyr::select(slope = pct)

slope_v
```
How many rows? Why is that?  

```{r aspect_v}
aspect_v <- aspect %>%
  st_as_sf(as_points = F, 
           merge = F) #%>%
  #dplyr::select(aspect = values) 

aspect_v
```
```{r flowdir_v}
flowdir_v <- flowdir %>%
  st_as_sf(as_points = F, 
           merge = F) #%>%
  #dplyr::select(flowdir = values) 

flowdir_v
```

# Joining all topo variables in one object  

```{r terrain_v }
terrain_v <- elev_v%>%
  st_join(slope_v,
          join = st_equals,
          left = T
          ) %>%
  st_join(aspect_v,
          join = st_equals,
          left = T
          ) %>%
  st_join(flowdir_v,
          join = st_equals,
          left = T
          )


terrain_v %>%
  summary()
```

# Exporting  
Exporting to file to use later for management zone creation.  
```{r exporting}

write_sf(terrain_v,"../data/terrain_v.geojson",
         delete_dsn = T)

# write_sf(terrain_v,"../data/terrain_v.shp", 
#          delete_dsn = T)
#to write in shape file ( it will have multiple file, but geojson compile has all in one)
```

# Summary  
Today we have:  

- Imported point vector elevation data  
- Interpolated elevation to same grid as used for yield (keeping them all on same spatial extent and resolution)  
- Computed secondary terrain variables (slope, aspect, flow direction)  
- Transformed them into vector, joined all in one object, and exported to file  

# What's next?  
Next we will process the last piece of information: electrical conductivity (ec) data.  

After being done with ec, we will be ready to create and validate management zones!  




